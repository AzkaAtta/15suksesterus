---
/**
 * SchemaViewInstagram.astro â€” Schema untuk halaman jasa /views-instagram/
 */

interface Offer {
  price: string | number
  priceCurrency?: string
  unitText?: string
  url?: string
  availability?: string
}

interface FAQItem { q: string; a: string }

interface Props {
  pageUrl: string
  pageTitle: string
  description: string
  imageWebp?: string
  imagePng?: string
  serviceName: string
  serviceUrl: string
  serviceType?: string
  areaServed?: string
  offers?: Offer[]
  faqItems?: FAQItem[]
}

const {
  pageUrl,
  pageTitle,
  description,
  imageWebp = '/views-instagram.webp',
  imagePng = '/views-instagram.png',
  serviceName = 'Views Instagram',
  serviceUrl = '/views-instagram/',
  serviceType = 'Video Views',
  areaServed = 'ID',
  offers = [
    { price: '200000', priceCurrency: 'IDR', unitText: 'per 1000', url: '/views-instagram/', availability: 'https://schema.org/InStock' }
  ],
  faqItems = []
}: Props = Astro.props

const site = Astro.site?.href?.replace(/\/$/, '') || 'https://auradigital.id'

// absolute image
const serviceImage = {
  '@type': 'ImageObject',
  url: new URL(imagePng, site).href,
  contentUrl: new URL(imageWebp, site).href,
  encodingFormat: ['image/png', 'image/webp']
}

const graph: any[] = [
  {
    '@type': 'WebPage',
    '@id': `${pageUrl}#webpage`,
    url: new URL(pageUrl, site).href,
    name: pageTitle,
    description,
    isPartOf: { '@id': `${site}/#website` },
    primaryImageOfPage: serviceImage
  },
  {
    '@type': 'BreadcrumbList',
    '@id': `${pageUrl}#breadcrumb`,
    itemListElement: [
      { '@type': 'ListItem', position: 1, name: 'Home', item: `${site}/` },
      { '@type': 'ListItem', position: 2, name: 'Layanan', item: `${site}/layanan/` },
      { '@type': 'ListItem', position: 3, name: serviceName, item: new URL(pageUrl, site).href }
    ]
  },
  {
    '@type': 'Service',
    '@id': `${serviceUrl}#service`,
    name: serviceName,
    url: new URL(serviceUrl, site).href,
    description,
    serviceType,
    areaServed,
    image: serviceImage,
    provider: { '@type': 'Organization', name: 'Aura Digital', url: site },
    offers: offers.map(o => ({
      '@type': 'Offer',
      price: String(o.price),
      priceCurrency: o.priceCurrency || 'IDR',
      ...(o.unitText ? { unitText: o.unitText } : {}),
      availability: o.availability || 'https://schema.org/InStock',
      url: new URL(o.url || serviceUrl, site).href
    })),
    potentialAction: [
      { '@type': 'OrderAction', target: new URL(`${serviceUrl}?ref=order`, site).href },
      { '@type': 'ContactAction', target: `${site}/kontak/` }
    ]
  }
]

// optional FAQ
if (faqItems.length) {
  graph.push({
    '@type': 'FAQPage',
    '@id': `${pageUrl}#faq`,
    mainEntity: faqItems.map(f => ({
      '@type': 'Question',
      name: f.q,
      acceptedAnswer: { '@type': 'Answer', text: f.a }
    }))
  })
}

const jsonld = { '@context': 'https://schema.org', '@graph': graph }
---

<script type="application/ld+json" set:html={JSON.stringify(jsonld)}></script>
